<div class="container py-5">
    <div class="row">
        <!-- Main Content -->
        <div class="col-md-8">
            <h1 class="text-center mb-4">Welcome to Our Restaurant</h1>
            <!-- Filter Section -->
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <label for="area" class="form-label">Select Area:</label>
                    <select id="area" class="form-select" onchange="handleFilterChange()">
                        {{#each areas}}
                            <option value="{{MaKhuVuc}}" {{#eq ../selectedArea MaKhuVuc}}selected{{/eq}}>{{TenKhuVuc}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="branch" class="form-label">Select Branch:</label>
                    <select id="branch" class="form-select" onchange="handleFilterChange()">
                        {{#each branches}}
                            <option value="{{MaChiNhanh}}" {{#eq ../selectedBranch MaChiNhanh}}selected{{/eq}}>{{TenChiNhanh}}</option>
                        {{/each}}
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="category" class="form-label">Category:</label>
                    <select id="category" class="form-select" onchange="handleFilterChange()">
                        {{#each categories}}
                            <option value="{{Muc}}" {{#eq ../selectedCategory Muc}}selected{{/eq}}>{{Muc}}</option>
                        {{/each}}
                    </select>
                </div>
                 <div class="col-md-3">
                    <label for="orderType" class="form-label">Order Type:</label>
                    <select id="orderType" class="form-select" onchange="handleFilterChange()">  
                        <option value="O" {{#eq ../orderType "O"}}selected{{/eq}}>Online</option>
                        <option value="T" {{#eq ../orderType "T"}}selected{{/eq}}>Trực Tiếp</option>
                        <option value="G" {{#eq ../orderType "G"}}selected{{/eq}}>Giao Hàng</option>
                    </select>
                </div>
                
            </div>

            <!-- Food Items Table -->
            <div class="row d-flex justify-content-between align-items-center mb-4">
                <div class="col-md-3">
                    <h2>Food Items</h2>
                </div>

                <div class="col-md-3">
                    <label for="sortByPrice" class="form-label">Sort By Price:</label>
                    <select id="sortByPrice" class="form-select" onchange="handleFilterChange()">  
                        <option value="asc" {{#eq ../sortByPrice "asc"}}selected{{/eq}}>Ascending</option>
                        <option value="desc" {{#eq ../sortByPrice "desc"}}selected{{/eq}}>Descending</option>
                    </select>
                </div>

                <div class="col-md-4">
                    <label for="searchQuery" class="form-label">Search:</label>
                    <input type="text" id="searchQuery" class="form-control" placeholder="Search foods..." 
                        oninput="handleFilterChange()" value="{{q}}" />
                </div>
            </div>
            
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Food Name</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Description</th>
                            <th>Images</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="foodItems">
                        {{#each foods}}
                        <tr>
                            <td>{{TenMonAn}}</td>
                            <td>{{Muc}}</td>
                            <td>{{GiaHienTai}}</td>
                            <td>{{MoTa}}</td>
                            <td><img src="{{HinhAnh}}" alt="{{TenMonAn}}" style="width: 50px; height: 50px;"></td>
                            <td><button class="btn btn-primary btn-sm" onclick="addToOrder('{{TenMonAn}}', {{GiaHienTai}})">Add</button></td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <nav aria-label="Food pagination">
                <ul class="pagination" id="pagination">
                    <!-- Pagination buttons will be dynamically generated here -->
                </ul>
            </nav>
           
            <!-- Tables Section -->
            <h2 class="mt-4">Tables</h2>
            <div class="table-responsive">
                <table id="tables" class="table table-bordered table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Table Number</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each tables}}
                        <tr>
                            <td>{{STT}}</td>
                            <td>{{TrangThai}}</td>
                            <td>
                                {{#if (eq TrangThai "Trống")}}
                                    <button class="btn btn-success btn-sm" onclick="selectTable('{{STT}}')">Select</button>
                                {{else}}
                                    <button class="btn btn-secondary btn-sm" disabled>Occupied</button>
                                {{/if}}
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Order Sidebar -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header text-center">
                    <h4>Order</h4>
                </div>
                <div class="card-body">
                    <p><strong>Selected Table:</strong> <span id="selectedTable">None</span></p>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Food</th>
                                <th>Qty</th>
                                <th>Price</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="orderList">
                            <tr>
                                <td colspan="4" class="text-center">No items in order.</td>
                            </tr>
                        </tbody>
                    </table>
                    <p class="text-end"><strong>Total:</strong> VND<span id="totalAmount">0</span></p>
                    {{#if (eq userRole 'customer')}}
                        <div>
                            <div class="d-flex justify-content-between">
                                <p class="text-start"><strong>CardType: </strong><span id="cardType"></span></p>
                                <p class="text-end"><strong>Discount:</strong> %<span id="discountAmount">0</span></p>
                            </div>
                            <p class="text-end"><strong>Final Total:</strong> VND<span id="finalTotal">0</span></p>
                        </div> 
                    {{/if}}

                    <div id="branchInputs" style="display: none;">
                        <div class="mb-3">
                            <label for="employeeId" class="form-label">Employee ID</label>
                            <input type="text" id="employeeId" class="form-control" placeholder="Enter Employee ID">
                        </div>
                        <div class="mb-3">
                            <label for="cardNumber" class="form-label">Card Number</label>
                            <input type="text" id="cardNumber" class="form-control" placeholder="Enter Card Number">
                        </div>
                    </div>

                    <button class="btn btn-primary w-100" onclick="checkout()">Checkout</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
    let order = [];
    let selectedTable = null;
    let currentPage = {{page}};
    const itemsPerPage = {{limit}};
    let cardInfo = null;
    let userRole = '{{userRole}}' || 'customer';
//    let userRole = 'branch';
    let userId = null;


    handleFilterChange(); // Load initial data
    initializeOrder();

    function initializeOrder() {
        if (userRole === 'customer') {
            document.getElementById('branchInputs').style.display = 'none';
        } else if (userRole === 'branch') {
            document.getElementById('branchInputs').style.display = 'block';
        }

        if (userRole === 'customer' && cardInfo) {
            document.getElementById('discountAmount').innerText = cardInfo.GiamGia;
        }
    }


    function handleFilterChange() {
        currentPage = 1; // Reset to page 1 whenever filter changes
        loadPage(currentPage);
    }

    function loadPage(page) {
        currentPage = page;
        const area = document.getElementById('area').value;
        const branch = document.getElementById('branch').value;
        const category = document.getElementById('category').value;
        const q = document.getElementById('searchQuery').value;
        const sortByPrice = document.getElementById('sortByPrice').value;
        const orderType = document.getElementById('orderType').value;


        // Construct the query string
        const queryParams = new URLSearchParams({
            area,
            branch,
            category,
            q,
            sortByPrice,
            orderType,
            page,
            limit: itemsPerPage
        });

        // Update the browser's URL without reloading the page
        const newUrl = `/home?${queryParams.toString()}`;
        window.history.pushState(null, '', newUrl); // Use replaceState to avoid adding to history stack

        // Use fetch to dynamically update the page content
        fetch(newUrl, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Update food items
            const foodItemsBody = document.getElementById('foodItems');
            foodItemsBody.innerHTML = data.foods.map(food => `
                <tr>
                    <td>${food.TenMonAn}</td>
                    <td>${food.Muc}</td>
                    <td>${food.GiaHienTai}</td>
                    <td>${food.MoTa}</td>
                    <td><img src="${food.HinhAnh}" alt="${food.TenMonAn}" style="width: 50px; height: 50px;"></td>
                    <td><button class="btn btn-primary btn-sm" onclick="addToOrder('${food.TenMonAn}', ${food.GiaHienTai})">Add</button></td>
                </tr>
            `).join('');

            // Update tables
            const tablesBody = document.querySelector('#tables tbody');
            tablesBody.innerHTML = data.tables.map(table => `
                <tr class="${table.TrangThai === 'Trống' ? '' : 'table-danger'}">
                    <td>${table.STT}</td>
                    <td>${table.TrangThai}</td>
                    <td>
                        ${table.TrangThai === 'Trống' 
                            ? `<button class="btn btn-success btn-sm" onclick="selectTable('${table.STT}')">Select</button>` 
                            : `<button class="btn btn-secondary btn-sm" disabled>Occupied</button>`}
                    </td>
                </tr>
            `).join('');

            // Render pagination
            renderPagination(data.page, data.totalPages);

            // Update dropdowns to reflect current selections
            document.getElementById('area').value = data.selectedArea;
            document.getElementById('branch').value = data.selectedBranch;
            document.getElementById('category').value = data.selectedCategory || 'all';
            document.getElementById('searchQuery').value = data.q || '';
            document.getElementById('sortByPrice').value = data.sortByPrice || 'asc';
            document.getElementById('orderType').value = data.orderType || 'O';
            userId = data.userId;
            cardInfo = data.cardInfo;
            // Update card type
            if (cardInfo && userRole === 'customer') {
                document.getElementById('cardType').innerText = cardInfo.TenLoaiThe;
            }
            initializeOrder();
        })
        .catch(error => {
            console.error('Error fetching data:', error);
            alert('Failed to load data. Please try again.');
        });
}


    function renderPagination(page, totalPages) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        //Previous button
        pagination.innerHTML += `
            <li class="page-item ${page === 1 ? 'disabled' : ''}">
                <button class="page-link" onclick="loadPage(${page - 1})">Previous</button>
            </li>
        `;

        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            pagination.innerHTML += `
                <li class="page-item ${page === i ? 'active' : ''}">
                    <button class="page-link" onclick="loadPage(${i})">${i}</button>
                </li>
            `;
        }

        // Next button
        pagination.innerHTML += `
            <li class="page-item ${page === totalPages ? 'disabled' : ''}">
                <button class="page-link" onclick="loadPage(${page + 1})">Next</button>
            </li>
        `;
    }

    function addToOrder(foodName, price) {
        const existingItem = order.find(item => item.foodName === foodName);
        if (existingItem) {
            existingItem.qty += 1;
            existingItem.total = existingItem.qty * price;
        } else {
            order.push({ foodName, qty: 1, price, total: price });
        }
        updateOrderList();
    }

    function changeQty(foodName, delta) {
        const item = order.find(item => item.foodName === foodName);
        if (item) {
            item.qty += delta;
            if (item.qty <= 0) {
                order = order.filter(i => i.foodName !== foodName);
            } else {
                item.total = item.qty * item.price;
            }
            updateOrderList();
        }
    }

    function removeFromOrder(foodName) {
        order = order.filter(item => item.foodName !== foodName);
        updateOrderList();
    }

    function updateOrderList() {
        const orderList = document.getElementById('orderList');
        const totalAmount = document.getElementById('totalAmount');
    

        orderList.innerHTML = '';
        let total = 0;

        order.forEach(item => {
            total += item.total;
            orderList.innerHTML += `
                <tr>
                    <td>${item.foodName}</td>
                    <td style="width: 100px;">
                        <button class="btn btn-sm btn-light" onclick="changeQty('${item.foodName}', -1)">-</button>
                        ${item.qty}
                        <button class="btn btn-sm btn-light" onclick="changeQty('${item.foodName}', 1)">+</button>
                    </td>
                    <td>${item.total}</td>
                    <td><button class="btn btn-danger btn-sm" onclick="removeFromOrder('${item.foodName}')">Delete</button></td>
                </tr>
            `;
        });

        if (order.length === 0) {
            orderList.innerHTML = '<tr><td colspan="4" class="text-center">No items in order.</td></tr>';
        }

        totalAmount.innerText = total.toFixed(2);
        if (userRole === 'customer') {
            const finalTotal = document.getElementById('finalTotal');
            finalTotal.innerText = total.toFixed(2) - (total * cardInfo.GiamGia / 100);
        }        
    }

    function selectTable(tableNumber) {
        // Check if the same table is clicked again, then deselect it
        if (selectedTable === tableNumber) {
            selectedTable = null; // Deselect the table
            document.getElementById('selectedTable').innerText = 'None'; // Update the UI
        } else {
            // Update the selected table and display it
            selectedTable = tableNumber;
            document.getElementById('selectedTable').innerText = tableNumber;
        }

        // Update the row colors for selected and unselected tables
        const rows = document.querySelectorAll('#tables tbody tr');
        rows.forEach(row => {
            row.classList.remove('table-primary'); // Remove highlight from all rows
            const status = row.cells[1].innerText.trim();
            if (status === 'Trống') {
        //       row.classList.add('table-secondary'); // Optional: add a "free" row style
            } else {
                row.classList.add('table-danger'); // Occupied row color
            }
        });

        // Highlight the currently selected table row
        if (selectedTable) {
            const selectedRow = Array.from(rows).find(row => row.cells[0].innerText === selectedTable);
            if (selectedRow) {
                selectedRow.classList.add('table-primary'); // Apply color to selected row
            }
        }
    }

    async function checkout() {
        if (!selectedTable) {
            alert('Please select a table!');
            return;
        }

        if (order.length === 0) {
            alert('Please add items to the order!');
            return;
        }

        if (userRole === 'branch') {
            const employeeId = document.getElementById('employeeId').value;
            const cardNumber = document.getElementById('cardNumber').value;
            if (!employeeId) {
                alert('Please enter the employee ID!');
                return;
            }
            if (!cardNumber) {
                alert('Please enter the card number!');
                return;
            }
        }

        // If all validations pass, send the order to the backend
        // If userRole is branch, send the employeeId and cardNumber as well

        
        const orderData = {
            table: selectedTable,
            menu: order,
            userId: userId,
            userRole: userRole,
        };

        if (userRole === 'branch') {
            orderData.employeeId = document.getElementById('employeeId').value;
            orderData.cardNumber = document.getElementById('cardNumber').value;
        }
        debugger;
        const response = await fetch('home/processOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderData),
        });

        const result = await response.json();

        if (response.ok) {
            alert(result.message);
        } else {
            alert(result.message);
        }

        // Reset the order and table selection
       // order = [];
       // selectedTable = null;
       // updateOrderList();
    }
</script>